<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classtinyxml2_1_1XMLHandle" kind="class" language="C++" prot="public">
    <compoundname>tinyxml2::XMLHandle</compoundname>
    <includes refid="tinyxml2_8h" local="no">tinyxml2.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtinyxml2_1_1XMLHandle_1a65449d71b75d8aeb40a54224c954c138" prot="private" static="no" mutable="no">
        <type><ref refid="classtinyxml2_1_1XMLNode" kindref="compound">XMLNode</ref> *</type>
        <definition>XMLNode* tinyxml2::XMLHandle::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <qualifiedname>tinyxml2::XMLHandle::_node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2317" column="17" bodyfile="include/tinyxml2.h" bodystart="2317" bodyend="-1"/>
        <referencedby refid="classtinyxml2_1_1XMLHandle_1aa07c9a53f78d7b2dc1018668641521d8" compoundref="tinyxml2_8h" startline="2243" endline="2247">operator=</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a9c240a35c18f053509b4b97ddccd9793" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinyxml2::XMLHandle::XMLHandle</definition>
        <argsstring>(XMLNode *node)</argsstring>
        <name>XMLHandle</name>
        <qualifiedname>tinyxml2::XMLHandle::XMLHandle</qualifiedname>
        <param>
          <type><ref refid="classtinyxml2_1_1XMLNode" kindref="compound">XMLNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Create a handle from any node (at any depth of the tree.) This can be a null pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2231" column="18" bodyfile="include/tinyxml2.h" bodystart="2231" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1aa2edbc1c0d3e3e8259bd98de7f1cf500" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinyxml2::XMLHandle::XMLHandle</definition>
        <argsstring>(XMLNode &amp;node)</argsstring>
        <name>XMLHandle</name>
        <qualifiedname>tinyxml2::XMLHandle::XMLHandle</qualifiedname>
        <param>
          <type><ref refid="classtinyxml2_1_1XMLNode" kindref="compound">XMLNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Create a handle from a node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2235" column="18" bodyfile="include/tinyxml2.h" bodystart="2235" bodyend="2237"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1afd8e01e6018c07347b8e6d80272466aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinyxml2::XMLHandle::XMLHandle</definition>
        <argsstring>(const XMLHandle &amp;ref)</argsstring>
        <name>XMLHandle</name>
        <qualifiedname>tinyxml2::XMLHandle::XMLHandle</qualifiedname>
        <param>
          <type>const <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2239" column="9" bodyfile="include/tinyxml2.h" bodystart="2239" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1aa07c9a53f78d7b2dc1018668641521d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> &amp;</type>
        <definition>XMLHandle &amp; tinyxml2::XMLHandle::operator=</definition>
        <argsstring>(const XMLHandle &amp;ref)</argsstring>
        <name>operator=</name>
        <qualifiedname>tinyxml2::XMLHandle::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2243" column="19" bodyfile="include/tinyxml2.h" bodystart="2243" bodyend="2247"/>
        <references refid="classtinyxml2_1_1XMLHandle_1a65449d71b75d8aeb40a54224c954c138" compoundref="tinyxml2_8h" startline="2317">_node</references>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a536447dc7f54c0cd11e031dad94795ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::FirstChild</definition>
        <argsstring>()</argsstring>
        <name>FirstChild</name>
        <qualifiedname>tinyxml2::XMLHandle::FirstChild</qualifiedname>
        <briefdescription>
<para>Get the first child of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2250" column="19" bodyfile="include/tinyxml2.h" bodystart="2250" bodyend="2253"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a74b04dd0f15e0bf01860e282b840b6a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::FirstChildElement</definition>
        <argsstring>(const char *name=0)</argsstring>
        <name>FirstChildElement</name>
        <qualifiedname>tinyxml2::XMLHandle::FirstChildElement</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the first child element of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2255" column="19" bodyfile="include/tinyxml2.h" bodystart="2255" bodyend="2258"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a9d09f04435f0f2f7d0816b0198d0517b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::LastChild</definition>
        <argsstring>()</argsstring>
        <name>LastChild</name>
        <qualifiedname>tinyxml2::XMLHandle::LastChild</qualifiedname>
        <briefdescription>
<para>Get the last child of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2260" column="19" bodyfile="include/tinyxml2.h" bodystart="2260" bodyend="2263"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a42cccd0ce8b1ce704f431025e9f19e0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::LastChildElement</definition>
        <argsstring>(const char *name=0)</argsstring>
        <name>LastChildElement</name>
        <qualifiedname>tinyxml2::XMLHandle::LastChildElement</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the last child element of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2265" column="19" bodyfile="include/tinyxml2.h" bodystart="2265" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a428374e756f4db4cbc287fec64eae02c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::PreviousSibling</definition>
        <argsstring>()</argsstring>
        <name>PreviousSibling</name>
        <qualifiedname>tinyxml2::XMLHandle::PreviousSibling</qualifiedname>
        <briefdescription>
<para>Get the previous sibling of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2270" column="19" bodyfile="include/tinyxml2.h" bodystart="2270" bodyend="2273"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a786957e498039554ed334cdc36612a7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::PreviousSiblingElement</definition>
        <argsstring>(const char *name=0)</argsstring>
        <name>PreviousSiblingElement</name>
        <qualifiedname>tinyxml2::XMLHandle::PreviousSiblingElement</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the previous sibling element of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2275" column="19" bodyfile="include/tinyxml2.h" bodystart="2275" bodyend="2278"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1aad2eccc7c7c7b18145877c978c3850b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::NextSibling</definition>
        <argsstring>()</argsstring>
        <name>NextSibling</name>
        <qualifiedname>tinyxml2::XMLHandle::NextSibling</qualifiedname>
        <briefdescription>
<para>Get the next sibling of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2280" column="19" bodyfile="include/tinyxml2.h" bodystart="2280" bodyend="2283"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1ae41d88ee061f3c49a081630ff753b2c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref></type>
        <definition>XMLHandle tinyxml2::XMLHandle::NextSiblingElement</definition>
        <argsstring>(const char *name=0)</argsstring>
        <name>NextSiblingElement</name>
        <qualifiedname>tinyxml2::XMLHandle::NextSiblingElement</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the next sibling element of this handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2285" column="19" bodyfile="include/tinyxml2.h" bodystart="2285" bodyend="2288"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a689453c96dd3d4016437d2298d1de691" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLNode" kindref="compound">XMLNode</ref> *</type>
        <definition>XMLNode * tinyxml2::XMLHandle::ToNode</definition>
        <argsstring>()</argsstring>
        <name>ToNode</name>
        <qualifiedname>tinyxml2::XMLHandle::ToNode</qualifiedname>
        <briefdescription>
<para>Safe cast to <ref refid="classtinyxml2_1_1XMLNode" kindref="compound">XMLNode</ref>. This can return null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2291" column="17" bodyfile="include/tinyxml2.h" bodystart="2291" bodyend="2294"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1ab2371c4adb8b04afe04ed216bf9b0676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLElement" kindref="compound">XMLElement</ref> *</type>
        <definition>XMLElement * tinyxml2::XMLHandle::ToElement</definition>
        <argsstring>()</argsstring>
        <name>ToElement</name>
        <qualifiedname>tinyxml2::XMLHandle::ToElement</qualifiedname>
        <briefdescription>
<para>Safe cast to <ref refid="classtinyxml2_1_1XMLElement" kindref="compound">XMLElement</ref>. This can return null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2296" column="20" bodyfile="include/tinyxml2.h" bodystart="2296" bodyend="2299"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1accc80bcbd81e816f13a23c172587c288" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLText" kindref="compound">XMLText</ref> *</type>
        <definition>XMLText * tinyxml2::XMLHandle::ToText</definition>
        <argsstring>()</argsstring>
        <name>ToText</name>
        <qualifiedname>tinyxml2::XMLHandle::ToText</qualifiedname>
        <briefdescription>
<para>Safe cast to <ref refid="classtinyxml2_1_1XMLText" kindref="compound">XMLText</ref>. This can return null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2301" column="17" bodyfile="include/tinyxml2.h" bodystart="2301" bodyend="2304"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1add97784cbe14ef42bb36e158ad6e6082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLUnknown" kindref="compound">XMLUnknown</ref> *</type>
        <definition>XMLUnknown * tinyxml2::XMLHandle::ToUnknown</definition>
        <argsstring>()</argsstring>
        <name>ToUnknown</name>
        <qualifiedname>tinyxml2::XMLHandle::ToUnknown</qualifiedname>
        <briefdescription>
<para>Safe cast to <ref refid="classtinyxml2_1_1XMLUnknown" kindref="compound">XMLUnknown</ref>. This can return null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2306" column="20" bodyfile="include/tinyxml2.h" bodystart="2306" bodyend="2309"/>
      </memberdef>
      <memberdef kind="function" id="classtinyxml2_1_1XMLHandle_1a85d0c76920a013ea2a29456dbf7d160d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinyxml2_1_1XMLDeclaration" kindref="compound">XMLDeclaration</ref> *</type>
        <definition>XMLDeclaration * tinyxml2::XMLHandle::ToDeclaration</definition>
        <argsstring>()</argsstring>
        <name>ToDeclaration</name>
        <qualifiedname>tinyxml2::XMLHandle::ToDeclaration</qualifiedname>
        <briefdescription>
<para>Safe cast to <ref refid="classtinyxml2_1_1XMLDeclaration" kindref="compound">XMLDeclaration</ref>. This can return null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tinyxml2.h" line="2311" column="24" bodyfile="include/tinyxml2.h" bodystart="2311" bodyend="2314"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> is a class that wraps a node pointer with null checks; this is an incredibly useful thing. Note that <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> is not part of the TinyXML-2 DOM structure. It is a separate utility class.</para>
<para>Take an example: <verbatim>&lt;Document&gt;
    &lt;Element attributeA = &quot;valueA&quot;&gt;
        &lt;Child attributeB = &quot;value1&quot; /&gt;
        &lt;Child attributeB = &quot;value2&quot; /&gt;
    &lt;/Element&gt;
&lt;/Document&gt;
</verbatim></para>
<para>Assuming you want the value of &quot;attributeB&quot; in the 2nd &quot;Child&quot; element, it&apos;s very easy to write a <emphasis>lot</emphasis> of code that looks like:</para>
<para><verbatim>XMLElement* root = document.FirstChildElement( &quot;Document&quot; );
if ( root )
{
    XMLElement* element = root-&gt;FirstChildElement( &quot;Element&quot; );
    if ( element )
    {
        XMLElement* child = element-&gt;FirstChildElement( &quot;Child&quot; );
        if ( child )
        {
            XMLElement* child2 = child-&gt;NextSiblingElement( &quot;Child&quot; );
            if ( child2 )
            {
                // Finally do something useful.
</verbatim></para>
<para>And that doesn&apos;t even cover &quot;else&quot; cases. <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> addresses the verbosity of such code. A <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref> checks for null pointers so it is perfectly safe and correct to use:</para>
<para><verbatim>XMLHandle docHandle( &amp;document );
XMLElement* child2 = docHandle.FirstChildElement( &quot;Document&quot; ).FirstChildElement( &quot;Element&quot; ).FirstChildElement().NextSiblingElement();
if ( child2 )
{
    // do something useful
</verbatim></para>
<para>Which is MUCH more concise and useful.</para>
<para>It is also safe to copy handles - internally they are nothing more than node pointers. <verbatim>XMLHandle handleCopy = handle;
</verbatim></para>
<para>See also <ref refid="classtinyxml2_1_1XMLConstHandle" kindref="compound">XMLConstHandle</ref>, which is the same as <ref refid="classtinyxml2_1_1XMLHandle" kindref="compound">XMLHandle</ref>, but operates on const objects. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>tinyxml2::DynArray&lt; tinyxml2::MemPoolT::Block *, 10 &gt;</label>
        <link refid="classtinyxml2_1_1DynArray"/>
        <childnode refid="10" relation="usage">
          <edgelabel>-_mem</edgelabel>
          <edgelabel>-_pool</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; tinyxml2::MemPoolT::Block *, 10 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>tinyxml2::DynArray&lt; tinyxml2::XMLNode *, 10 &gt;</label>
        <link refid="classtinyxml2_1_1DynArray"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-_mem</edgelabel>
          <edgelabel>-_pool</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; tinyxml2::XMLNode *, 10 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>tinyxml2::MemPoolT&lt; sizeof(tinyxml2::XMLAttribute)&gt;</label>
        <link refid="classtinyxml2_1_1MemPoolT"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-_blockPtrs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-_root</edgelabel>
        </childnode>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; sizeof(tinyxml2::XMLAttribute)&gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>tinyxml2::MemPoolT&lt; sizeof(tinyxml2::XMLComment)&gt;</label>
        <link refid="classtinyxml2_1_1MemPoolT"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-_blockPtrs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-_root</edgelabel>
        </childnode>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; sizeof(tinyxml2::XMLComment)&gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>tinyxml2::MemPoolT&lt; sizeof(tinyxml2::XMLElement)&gt;</label>
        <link refid="classtinyxml2_1_1MemPoolT"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-_blockPtrs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-_root</edgelabel>
        </childnode>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; sizeof(tinyxml2::XMLElement)&gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>tinyxml2::MemPoolT&lt; sizeof(tinyxml2::XMLText)&gt;</label>
        <link refid="classtinyxml2_1_1MemPoolT"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-_blockPtrs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-_root</edgelabel>
        </childnode>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; sizeof(tinyxml2::XMLText)&gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>tinyxml2::DynArray&lt; T, INITIAL_SIZE &gt;</label>
        <link refid="classtinyxml2_1_1DynArray"/>
      </node>
      <node id="8">
        <label>tinyxml2::MemPool</label>
        <link refid="classtinyxml2_1_1MemPool"/>
      </node>
      <node id="12">
        <label>tinyxml2::MemPoolT&lt; ITEM_SIZE &gt;</label>
        <link refid="classtinyxml2_1_1MemPoolT"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-_blockPtrs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-_root</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>tinyxml2::MemPoolT&lt; ITEM_SIZE &gt;::Block</label>
        <link refid="structtinyxml2_1_1MemPoolT_1_1Block"/>
        <childnode refid="11" relation="usage">
          <edgelabel>+items</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>tinyxml2::MemPoolT&lt; ITEM_SIZE &gt;::Item</label>
        <link refid="uniontinyxml2_1_1MemPoolT_1_1Item"/>
        <childnode refid="11" relation="usage">
          <edgelabel>+next</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>tinyxml2::StrPair</label>
        <link refid="classtinyxml2_1_1StrPair"/>
      </node>
      <node id="3">
        <label>tinyxml2::XMLDocument</label>
        <link refid="classtinyxml2_1_1XMLDocument"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>-_errorStr</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>-_unlinked</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>-_elementPool</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>-_attributePool</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>-_textPool</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>-_commentPool</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>tinyxml2::XMLHandle</label>
        <link refid="classtinyxml2_1_1XMLHandle"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-_node</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>tinyxml2::XMLNode</label>
        <link refid="classtinyxml2_1_1XMLNode"/>
        <childnode refid="3" relation="usage">
          <edgelabel>#_document</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>#_firstChild</edgelabel>
          <edgelabel>#_lastChild</edgelabel>
          <edgelabel>#_next</edgelabel>
          <edgelabel>#_parent</edgelabel>
          <edgelabel>#_prev</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>#_value</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>-_memPool</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tinyxml2.h" line="2227" column="5" bodyfile="include/tinyxml2.h" bodystart="2228" bodyend="2318"/>
    <listofallmembers>
      <member refid="classtinyxml2_1_1XMLHandle_1a65449d71b75d8aeb40a54224c954c138" prot="private" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>_node</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a536447dc7f54c0cd11e031dad94795ae" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>FirstChild</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a74b04dd0f15e0bf01860e282b840b6a3" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>FirstChildElement</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a9d09f04435f0f2f7d0816b0198d0517b" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>LastChild</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a42cccd0ce8b1ce704f431025e9f19e0c" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>LastChildElement</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1aad2eccc7c7c7b18145877c978c3850b5" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>NextSibling</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1ae41d88ee061f3c49a081630ff753b2c5" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>NextSiblingElement</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1aa07c9a53f78d7b2dc1018668641521d8" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>operator=</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a428374e756f4db4cbc287fec64eae02c" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>PreviousSibling</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a786957e498039554ed334cdc36612a7e" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>PreviousSiblingElement</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a85d0c76920a013ea2a29456dbf7d160d" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>ToDeclaration</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1ab2371c4adb8b04afe04ed216bf9b0676" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>ToElement</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a689453c96dd3d4016437d2298d1de691" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>ToNode</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1accc80bcbd81e816f13a23c172587c288" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>ToText</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1add97784cbe14ef42bb36e158ad6e6082" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>ToUnknown</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1a9c240a35c18f053509b4b97ddccd9793" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>XMLHandle</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1aa2edbc1c0d3e3e8259bd98de7f1cf500" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>XMLHandle</name></member>
      <member refid="classtinyxml2_1_1XMLHandle_1afd8e01e6018c07347b8e6d80272466aa" prot="public" virt="non-virtual"><scope>tinyxml2::XMLHandle</scope><name>XMLHandle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
