<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtinyxml2_1_1XMLHandle" xml:lang="en-US">
<title>tinyxml2::XMLHandle Class Reference</title>
<indexterm><primary>tinyxml2::XMLHandle</primary></indexterm>
<para>
<computeroutput>#include &lt;tinyxml2.h&gt;</computeroutput>
</para>
Collaboration diagram for tinyxml2::XMLHandle:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtinyxml2_1_1XMLHandle__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle_1a9c240a35c18f053509b4b97ddccd9793">XMLHandle</link> (<link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> *node)</para>

<para>Create a handle from any node (at any depth of the tree.) This can be a null pointer. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle_1aa2edbc1c0d3e3e8259bd98de7f1cf500">XMLHandle</link> (<link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> &amp;node)</para>

<para>Create a handle from a node. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle_1afd8e01e6018c07347b8e6d80272466aa">XMLHandle</link> (const <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> &amp;ref)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> &amp; <link linkend="_classtinyxml2_1_1XMLHandle_1aa07c9a53f78d7b2dc1018668641521d8">operator=</link> (const <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> &amp;ref)</para>

<para>Assignment. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1a536447dc7f54c0cd11e031dad94795ae">FirstChild</link> ()</para>

<para>Get the first child of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1a74b04dd0f15e0bf01860e282b840b6a3">FirstChildElement</link> (const char *name=0)</para>

<para>Get the first child element of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1a9d09f04435f0f2f7d0816b0198d0517b">LastChild</link> ()</para>

<para>Get the last child of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1a42cccd0ce8b1ce704f431025e9f19e0c">LastChildElement</link> (const char *name=0)</para>

<para>Get the last child element of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1a428374e756f4db4cbc287fec64eae02c">PreviousSibling</link> ()</para>

<para>Get the previous sibling of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1a786957e498039554ed334cdc36612a7e">PreviousSiblingElement</link> (const char *name=0)</para>

<para>Get the previous sibling element of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1aad2eccc7c7c7b18145877c978c3850b5">NextSibling</link> ()</para>

<para>Get the next sibling of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> <link linkend="_classtinyxml2_1_1XMLHandle_1ae41d88ee061f3c49a081630ff753b2c5">NextSiblingElement</link> (const char *name=0)</para>

<para>Get the next sibling element of this handle. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> * <link linkend="_classtinyxml2_1_1XMLHandle_1a689453c96dd3d4016437d2298d1de691">ToNode</link> ()</para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link>. This can return null. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLElement">XMLElement</link> * <link linkend="_classtinyxml2_1_1XMLHandle_1ab2371c4adb8b04afe04ed216bf9b0676">ToElement</link> ()</para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLElement">XMLElement</link>. This can return null. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLText">XMLText</link> * <link linkend="_classtinyxml2_1_1XMLHandle_1accc80bcbd81e816f13a23c172587c288">ToText</link> ()</para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLText">XMLText</link>. This can return null. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLUnknown">XMLUnknown</link> * <link linkend="_classtinyxml2_1_1XMLHandle_1add97784cbe14ef42bb36e158ad6e6082">ToUnknown</link> ()</para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLUnknown">XMLUnknown</link>. This can return null. </para>
</listitem>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLDeclaration">XMLDeclaration</link> * <link linkend="_classtinyxml2_1_1XMLHandle_1a85d0c76920a013ea2a29456dbf7d160d">ToDeclaration</link> ()</para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLDeclaration">XMLDeclaration</link>. This can return null. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> * <link linkend="_classtinyxml2_1_1XMLHandle_1a65449d71b75d8aeb40a54224c954c138">_node</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> is a class that wraps a node pointer with null checks; this is an incredibly useful thing. Note that <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> is not part of the TinyXML-2 DOM structure. It is a separate utility class.</para>

<para>Take an example: <literallayout><computeroutput>&lt;Document&gt;
    &lt;Element attributeA = &quot;valueA&quot;&gt;
        &lt;Child attributeB = &quot;value1&quot; /&gt;
        &lt;Child attributeB = &quot;value2&quot; /&gt;
    &lt;/Element&gt;
&lt;/Document&gt;
</computeroutput></literallayout></para>

<para>Assuming you want the value of &quot;attributeB&quot; in the 2nd &quot;Child&quot; element, it&apos;s very easy to write a <emphasis>lot</emphasis> of code that looks like:</para>

<para><literallayout><computeroutput>XMLElement* root = document.FirstChildElement( &quot;Document&quot; );
if ( root )
{
    XMLElement* element = root-&gt;FirstChildElement( &quot;Element&quot; );
    if ( element )
    {
        XMLElement* child = element-&gt;FirstChildElement( &quot;Child&quot; );
        if ( child )
        {
            XMLElement* child2 = child-&gt;NextSiblingElement( &quot;Child&quot; );
            if ( child2 )
            {
                // Finally do something useful.
</computeroutput></literallayout></para>

<para>And that doesn&apos;t even cover &quot;else&quot; cases. <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> addresses the verbosity of such code. A <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> checks for null pointers so it is perfectly safe and correct to use:</para>

<para><literallayout><computeroutput>XMLHandle docHandle( &amp;document );
XMLElement* child2 = docHandle.FirstChildElement( &quot;Document&quot; ).FirstChildElement( &quot;Element&quot; ).FirstChildElement().NextSiblingElement();
if ( child2 )
{
    // do something useful
</computeroutput></literallayout></para>

<para>Which is MUCH more concise and useful.</para>

<para>It is also safe to copy handles - internally they are nothing more than node pointers. <literallayout><computeroutput>XMLHandle handleCopy = handle;
</computeroutput></literallayout></para>

<para>See also <link linkend="_classtinyxml2_1_1XMLConstHandle">XMLConstHandle</link>, which is the same as <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link>, but operates on const objects. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a9c240a35c18f053509b4b97ddccd9793"/><section>
    <title>XMLHandle()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>XMLHandle</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>XMLHandle</secondary></indexterm>
<para><computeroutput>tinyxml2::XMLHandle::XMLHandle (<link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> * node)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Create a handle from any node (at any depth of the tree.) This can be a null pointer. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1aa2edbc1c0d3e3e8259bd98de7f1cf500"/><section>
    <title>XMLHandle()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>XMLHandle</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>XMLHandle</secondary></indexterm>
<para><computeroutput>tinyxml2::XMLHandle::XMLHandle (<link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> &amp; node)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Create a handle from a node. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1afd8e01e6018c07347b8e6d80272466aa"/><section>
    <title>XMLHandle()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>XMLHandle</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>XMLHandle</secondary></indexterm>
<para><computeroutput>tinyxml2::XMLHandle::XMLHandle (const <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> &amp; ref)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy constructor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a536447dc7f54c0cd11e031dad94795ae"/><section>
    <title>FirstChild()</title>
<indexterm><primary>FirstChild</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>FirstChild</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::FirstChild ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the first child of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a74b04dd0f15e0bf01860e282b840b6a3"/><section>
    <title>FirstChildElement()</title>
<indexterm><primary>FirstChildElement</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>FirstChildElement</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::FirstChildElement (const char * name = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the first child element of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a9d09f04435f0f2f7d0816b0198d0517b"/><section>
    <title>LastChild()</title>
<indexterm><primary>LastChild</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>LastChild</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::LastChild ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the last child of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a42cccd0ce8b1ce704f431025e9f19e0c"/><section>
    <title>LastChildElement()</title>
<indexterm><primary>LastChildElement</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>LastChildElement</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::LastChildElement (const char * name = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the last child element of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1aad2eccc7c7c7b18145877c978c3850b5"/><section>
    <title>NextSibling()</title>
<indexterm><primary>NextSibling</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>NextSibling</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::NextSibling ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the next sibling of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1ae41d88ee061f3c49a081630ff753b2c5"/><section>
    <title>NextSiblingElement()</title>
<indexterm><primary>NextSiblingElement</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>NextSiblingElement</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::NextSiblingElement (const char * name = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the next sibling element of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1aa07c9a53f78d7b2dc1018668641521d8"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> &amp; tinyxml2::XMLHandle::operator= (const <link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> &amp; ref)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a428374e756f4db4cbc287fec64eae02c"/><section>
    <title>PreviousSibling()</title>
<indexterm><primary>PreviousSibling</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>PreviousSibling</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::PreviousSibling ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the previous sibling of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a786957e498039554ed334cdc36612a7e"/><section>
    <title>PreviousSiblingElement()</title>
<indexterm><primary>PreviousSiblingElement</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>PreviousSiblingElement</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLHandle">XMLHandle</link> tinyxml2::XMLHandle::PreviousSiblingElement (const char * name = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the previous sibling element of this handle. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a85d0c76920a013ea2a29456dbf7d160d"/><section>
    <title>ToDeclaration()</title>
<indexterm><primary>ToDeclaration</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>ToDeclaration</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLDeclaration">XMLDeclaration</link> * tinyxml2::XMLHandle::ToDeclaration ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLDeclaration">XMLDeclaration</link>. This can return null. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1ab2371c4adb8b04afe04ed216bf9b0676"/><section>
    <title>ToElement()</title>
<indexterm><primary>ToElement</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>ToElement</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLElement">XMLElement</link> * tinyxml2::XMLHandle::ToElement ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLElement">XMLElement</link>. This can return null. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a689453c96dd3d4016437d2298d1de691"/><section>
    <title>ToNode()</title>
<indexterm><primary>ToNode</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>ToNode</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link> * tinyxml2::XMLHandle::ToNode ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link>. This can return null. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1accc80bcbd81e816f13a23c172587c288"/><section>
    <title>ToText()</title>
<indexterm><primary>ToText</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>ToText</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLText">XMLText</link> * tinyxml2::XMLHandle::ToText ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLText">XMLText</link>. This can return null. </para>
</para>
</section>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1add97784cbe14ef42bb36e158ad6e6082"/><section>
    <title>ToUnknown()</title>
<indexterm><primary>ToUnknown</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>ToUnknown</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLUnknown">XMLUnknown</link> * tinyxml2::XMLHandle::ToUnknown ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe cast to <link linkend="_classtinyxml2_1_1XMLUnknown">XMLUnknown</link>. This can return null. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classtinyxml2_1_1XMLHandle_1a65449d71b75d8aeb40a54224c954c138"/><section>
    <title>_node</title>
<indexterm><primary>_node</primary><secondary>tinyxml2::XMLHandle</secondary></indexterm>
<indexterm><primary>tinyxml2::XMLHandle</primary><secondary>_node</secondary></indexterm>
<para><computeroutput><link linkend="_classtinyxml2_1_1XMLNode">XMLNode</link>* tinyxml2::XMLHandle::_node<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
include/<link linkend="_tinyxml2_8h">tinyxml2.h</link></section>
</section>
